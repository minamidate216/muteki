/* tslint:disable */
/* eslint-disable */
/**
 * G\'s WorkのAPI
 * G\'s Workで使うAPIの仕様です
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ErrorResponseModel
 */
export interface ErrorResponseModel {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponseModel
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponseModel
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ForeignRatioModel
 */
export interface ForeignRatioModel {
    /**
     * 外国人比率ID
     * @type {number}
     * @memberof ForeignRatioModel
     */
    'foreign_ratio_id': number;
    /**
     * 外国人比率
     * @type {number}
     * @memberof ForeignRatioModel
     */
    'foreign_ratio': number;
    /**
     * 国籍
     * @type {string}
     * @memberof ForeignRatioModel
     */
    'country': string;
}
/**
 * 
 * @export
 * @interface JobDetailModel
 */
export interface JobDetailModel {
    /**
     * 求人ID
     * @type {number}
     * @memberof JobDetailModel
     */
    'job_id': number;
    /**
     * 福利厚生
     * @type {string}
     * @memberof JobDetailModel
     */
    'benefits': string;
    /**
     * 仕事内容
     * @type {string}
     * @memberof JobDetailModel
     */
    'work_description': string;
    /**
     * 勤務時間
     * @type {string}
     * @memberof JobDetailModel
     */
    'work_hours': string;
    /**
     * 応募条件
     * @type {string}
     * @memberof JobDetailModel
     */
    'work_requirements': string;
    /**
     * 歓迎条件
     * @type {string}
     * @memberof JobDetailModel
     */
    'work_welcome': string;
    /**
     * 試用期間
     * @type {string}
     * @memberof JobDetailModel
     */
    'work_trial_time': string;
    /**
     * 年収
     * @type {string}
     * @memberof JobDetailModel
     */
    'work_year_salary': string;
    /**
     * 会社のいいポイント
     * @type {string}
     * @memberof JobDetailModel
     */
    'work_good_points': string;
    /**
     * 求める人物像
     * @type {string}
     * @memberof JobDetailModel
     */
    'work_need_person': string;
    /**
     * 開発環境
     * @type {string}
     * @memberof JobDetailModel
     */
    'work_environment': string;
    /**
     * 業界
     * @type {string}
     * @memberof JobDetailModel
     */
    'industry': string;
    /**
     * 
     * @type {Array<SkillModel>}
     * @memberof JobDetailModel
     */
    'skills': Array<SkillModel>;
    /**
     * 
     * @type {Array<JobImgModel>}
     * @memberof JobDetailModel
     */
    'imgs': Array<JobImgModel>;
    /**
     * 
     * @type {JobModel}
     * @memberof JobDetailModel
     */
    'job_in_card': JobModel;
    /**
     * 
     * @type {Array<ForeignRatioModel>}
     * @memberof JobDetailModel
     */
    'foreign_ratios': Array<ForeignRatioModel>;
}
/**
 * 
 * @export
 * @interface JobImgModel
 */
export interface JobImgModel {
    /**
     * 求人画像ID
     * @type {number}
     * @memberof JobImgModel
     */
    'img_id': number;
    /**
     * 求人画像URL
     * @type {string}
     * @memberof JobImgModel
     */
    'img_url': string;
    /**
     * 求人ID
     * @type {number}
     * @memberof JobImgModel
     */
    'job_id': number;
}
/**
 * 
 * @export
 * @interface JobIsLoginLikeJobListGet200Response
 */
export interface JobIsLoginLikeJobListGet200Response {
    /**
     * 
     * @type {Array<number>}
     * @memberof JobIsLoginLikeJobListGet200Response
     */
    'jobIds'?: Array<number>;
}
/**
 * 
 * @export
 * @interface JobModel
 */
export interface JobModel {
    /**
     * 求人ＩＤ
     * @type {number}
     * @memberof JobModel
     */
    'job_id': number;
    /**
     * 職位名
     * @type {string}
     * @memberof JobModel
     */
    'job_name': string;
    /**
     * 会社名
     * @type {string}
     * @memberof JobModel
     */
    'company_name': string;
    /**
     * 日本語レベル
     * @type {number}
     * @memberof JobModel
     */
    'japanese_level': number;
    /**
     * 最低給与
     * @type {number}
     * @memberof JobModel
     */
    'min_salary': number;
    /**
     * 最高給与
     * @type {number}
     * @memberof JobModel
     */
    'max_salary': number;
    /**
     * 勤務地
     * @type {string}
     * @memberof JobModel
     */
    'location': string;
    /**
     * タグ1
     * @type {string}
     * @memberof JobModel
     */
    'tag1': string;
    /**
     * タグ2
     * @type {string}
     * @memberof JobModel
     */
    'tag2': string;
    /**
     * タグ3
     * @type {string}
     * @memberof JobModel
     */
    'tag3': string;
    /**
     * 外国人比率
     * @type {number}
     * @memberof JobModel
     */
    'foreign_ratio': number;
}
/**
 * 
 * @export
 * @interface JobsModel
 */
export interface JobsModel {
    /**
     * 
     * @type {Array<JobModel>}
     * @memberof JobsModel
     */
    'jobs': Array<JobModel>;
}
/**
 * 
 * @export
 * @interface LikeRequest
 */
export interface LikeRequest {
    /**
     * 求人Id
     * @type {number}
     * @memberof LikeRequest
     */
    'jobId': number;
}
/**
 * 
 * @export
 * @interface SkillModel
 */
export interface SkillModel {
    /**
     * スキルID
     * @type {number}
     * @memberof SkillModel
     */
    'skill_id': number;
    /**
     * スキル
     * @type {string}
     * @memberof SkillModel
     */
    'skill_name': string;
}
/**
 * 
 * @export
 * @interface SkillsModel
 */
export interface SkillsModel {
    /**
     * skill
     * @type {Array<SkillModel>}
     * @memberof SkillsModel
     */
    'skills': Array<SkillModel>;
}
/**
 * 
 * @export
 * @interface UserModel
 */
export interface UserModel {
    /**
     * ユーザ名(認証済みの場合のみ設定)
     * @type {string}
     * @memberof UserModel
     */
    'user_email'?: string;
    /**
     * 認証済みかどうか
     * @type {boolean}
     * @memberof UserModel
     */
    'is_authenticated': boolean;
}
/**
 * 
 * @export
 * @interface UserProfileModel
 */
export interface UserProfileModel {
    /**
     * ユーザのID
     * @type {number}
     * @memberof UserProfileModel
     */
    'id': number;
    /**
     * ユーザの氏名
     * @type {string}
     * @memberof UserProfileModel
     */
    'name': string;
    /**
     * フリガナ/アルファベット
     * @type {string}
     * @memberof UserProfileModel
     */
    'real_name': string;
    /**
     * 生年月日
     * @type {string}
     * @memberof UserProfileModel
     */
    'birthday': string;
    /**
     * 性別
     * @type {number}
     * @memberof UserProfileModel
     */
    'sex': number;
    /**
     * 住所（都道府県）
     * @type {string}
     * @memberof UserProfileModel
     */
    'address': string;
    /**
     * 住所（詳細）
     * @type {string}
     * @memberof UserProfileModel
     */
    'address_detail': string;
    /**
     * 電話番号
     * @type {string}
     * @memberof UserProfileModel
     */
    'tel': string;
    /**
     * 連絡用メールアドレス
     * @type {string}
     * @memberof UserProfileModel
     */
    'user_email': string;
    /**
     * 国籍
     * @type {string}
     * @memberof UserProfileModel
     */
    'country': string;
    /**
     * 在留期間
     * @type {string}
     * @memberof UserProfileModel
     */
    'zairyu_time': string;
    /**
     * 日本語レベル
     * @type {string}
     * @memberof UserProfileModel
     */
    'japanese': string;
    /**
     * 日本語資格（取得した）
     * @type {number}
     * @memberof UserProfileModel
     */
    'japanese_level': number;
    /**
     * 就業状況
     * @type {string}
     * @memberof UserProfileModel
     */
    'work_status': string;
    /**
     * 履歴書ファイルURL
     * @type {string}
     * @memberof UserProfileModel
     */
    'rireki_url': string;
}
/**
 * 
 * @export
 * @interface UserRequest
 */
export interface UserRequest {
    /**
     * ユーザーEmail
     * @type {string}
     * @memberof UserRequest
     */
    'email': string;
    /**
     * パスワード
     * @type {string}
     * @memberof UserRequest
     */
    'password': string;
}

/**
 * ItemApi - axios parameter creator
 * @export
 */
export const ItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * skillリストを取得 
         * @summary (01)スキルリストを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemSkillListGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/item/skillList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemApi - functional programming interface
 * @export
 */
export const ItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemApiAxiosParamCreator(configuration)
    return {
        /**
         * skillリストを取得 
         * @summary (01)スキルリストを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemSkillListGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkillsModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemSkillListGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemApi.itemSkillListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ItemApi - factory interface
 * @export
 */
export const ItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemApiFp(configuration)
    return {
        /**
         * skillリストを取得 
         * @summary (01)スキルリストを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemSkillListGet(options?: any): AxiosPromise<SkillsModel> {
            return localVarFp.itemSkillListGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ItemApi - object-oriented interface
 * @export
 * @class ItemApi
 * @extends {BaseAPI}
 */
export class ItemApi extends BaseAPI {
    /**
     * skillリストを取得 
     * @summary (01)スキルリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApi
     */
    public itemSkillListGet(options?: RawAxiosRequestConfig) {
        return ItemApiFp(this.configuration).itemSkillListGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * JobApi - axios parameter creator
 * @export
 */
export const JobApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * お気に入りから削除する 
         * @summary (06) お気に入り求人削除
         * @param {number} jobId ID of the job to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobIsLoginJobIdDelete: async (jobId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('jobIsLoginJobIdDelete', 'jobId', jobId)
            const localVarPath = `/job/isLogin/{jobId}`
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * お気に入った求人リストを取得 
         * @summary (07) お気に入った求人リストを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobIsLoginLikeJobListGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/job/isLogin/likeJobList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 求人リストのいいねボタンを押すと ＤＢに登録 
         * @summary (05) 求人いいね登録
         * @param {LikeRequest} [likeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobIsLoginLikePost: async (likeRequest?: LikeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/job/isLogin/like`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(likeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 求人の詳細を取得 
         * @summary (02)求人詳細
         * @param {number} jobId 求人ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobJobIdGet: async (jobId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('jobJobIdGet', 'jobId', jobId)
            const localVarPath = `/job/{jobId}`
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 全求人のリストを取得 
         * @summary (01)求人一覧
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobJobListGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/job/jobList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary (03)求人検索
         * @param {Array<string>} [selectedJobNames] 
         * @param {Array<string>} [selectedSkills] スキルで検索
         * @param {Array<string>} [selectedJapaneseLevel] 
         * @param {Array<string>} [selectedLocations] 
         * @param {Array<string>} [selectedSalary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobSearchGet: async (selectedJobNames?: Array<string>, selectedSkills?: Array<string>, selectedJapaneseLevel?: Array<string>, selectedLocations?: Array<string>, selectedSalary?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/job/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (selectedJobNames) {
                localVarQueryParameter['selectedJobNames'] = selectedJobNames;
            }

            if (selectedSkills) {
                localVarQueryParameter['selectedSkills'] = selectedSkills;
            }

            if (selectedJapaneseLevel) {
                localVarQueryParameter['selectedJapaneseLevel'] = selectedJapaneseLevel;
            }

            if (selectedLocations) {
                localVarQueryParameter['selectedLocations'] = selectedLocations;
            }

            if (selectedSalary) {
                localVarQueryParameter['selectedSalary'] = selectedSalary;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary (04)詳細求人検索
         * @param {Array<string>} [selectedJobNames] 職種で検索
         * @param {Array<string>} [selectedSkills] スキルで検索
         * @param {Array<string>} [selectedJapaneseLevel] 日本語レベルで検索
         * @param {Array<string>} [selectedLocations] 勤務地で検索
         * @param {Array<string>} [selectedSalary] 年収で検索
         * @param {Array<string>} [selectedIndustry] 業界で検索
         * @param {Array<string>} [selectedWorkExperience] 仕事経験で検索
         * @param {Array<string>} [selectedEmployeeNum] 企業規模で検索
         * @param {Array<string>} [selectedForeignCountries] 外国人国籍で検索
         * @param {Array<string>} [selectedForeignRatio] 外国人比率で検索
         * @param {Array<string>} [selectedPickyAbout] こだわり条件で検索
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobSearchMoreGet: async (selectedJobNames?: Array<string>, selectedSkills?: Array<string>, selectedJapaneseLevel?: Array<string>, selectedLocations?: Array<string>, selectedSalary?: Array<string>, selectedIndustry?: Array<string>, selectedWorkExperience?: Array<string>, selectedEmployeeNum?: Array<string>, selectedForeignCountries?: Array<string>, selectedForeignRatio?: Array<string>, selectedPickyAbout?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/job/search/more`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (selectedJobNames) {
                localVarQueryParameter['selectedJobNames'] = selectedJobNames;
            }

            if (selectedSkills) {
                localVarQueryParameter['selectedSkills'] = selectedSkills;
            }

            if (selectedJapaneseLevel) {
                localVarQueryParameter['selectedJapaneseLevel'] = selectedJapaneseLevel;
            }

            if (selectedLocations) {
                localVarQueryParameter['selectedLocations'] = selectedLocations;
            }

            if (selectedSalary) {
                localVarQueryParameter['selectedSalary'] = selectedSalary;
            }

            if (selectedIndustry) {
                localVarQueryParameter['selectedIndustry'] = selectedIndustry;
            }

            if (selectedWorkExperience) {
                localVarQueryParameter['selectedWorkExperience'] = selectedWorkExperience;
            }

            if (selectedEmployeeNum) {
                localVarQueryParameter['selectedEmployeeNum'] = selectedEmployeeNum;
            }

            if (selectedForeignCountries) {
                localVarQueryParameter['selectedForeignCountries'] = selectedForeignCountries;
            }

            if (selectedForeignRatio) {
                localVarQueryParameter['selectedForeignRatio'] = selectedForeignRatio;
            }

            if (selectedPickyAbout) {
                localVarQueryParameter['selectedPickyAbout'] = selectedPickyAbout;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobApi - functional programming interface
 * @export
 */
export const JobApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobApiAxiosParamCreator(configuration)
    return {
        /**
         * お気に入りから削除する 
         * @summary (06) お気に入り求人削除
         * @param {number} jobId ID of the job to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobIsLoginJobIdDelete(jobId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobIsLoginJobIdDelete(jobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobApi.jobIsLoginJobIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * お気に入った求人リストを取得 
         * @summary (07) お気に入った求人リストを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobIsLoginLikeJobListGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobIsLoginLikeJobListGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobIsLoginLikeJobListGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobApi.jobIsLoginLikeJobListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 求人リストのいいねボタンを押すと ＤＢに登録 
         * @summary (05) 求人いいね登録
         * @param {LikeRequest} [likeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobIsLoginLikePost(likeRequest?: LikeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobIsLoginLikePost(likeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobApi.jobIsLoginLikePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 求人の詳細を取得 
         * @summary (02)求人詳細
         * @param {number} jobId 求人ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobJobIdGet(jobId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobDetailModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobJobIdGet(jobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobApi.jobJobIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 全求人のリストを取得 
         * @summary (01)求人一覧
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobJobListGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobsModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobJobListGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobApi.jobJobListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary (03)求人検索
         * @param {Array<string>} [selectedJobNames] 
         * @param {Array<string>} [selectedSkills] スキルで検索
         * @param {Array<string>} [selectedJapaneseLevel] 
         * @param {Array<string>} [selectedLocations] 
         * @param {Array<string>} [selectedSalary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobSearchGet(selectedJobNames?: Array<string>, selectedSkills?: Array<string>, selectedJapaneseLevel?: Array<string>, selectedLocations?: Array<string>, selectedSalary?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobsModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobSearchGet(selectedJobNames, selectedSkills, selectedJapaneseLevel, selectedLocations, selectedSalary, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobApi.jobSearchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary (04)詳細求人検索
         * @param {Array<string>} [selectedJobNames] 職種で検索
         * @param {Array<string>} [selectedSkills] スキルで検索
         * @param {Array<string>} [selectedJapaneseLevel] 日本語レベルで検索
         * @param {Array<string>} [selectedLocations] 勤務地で検索
         * @param {Array<string>} [selectedSalary] 年収で検索
         * @param {Array<string>} [selectedIndustry] 業界で検索
         * @param {Array<string>} [selectedWorkExperience] 仕事経験で検索
         * @param {Array<string>} [selectedEmployeeNum] 企業規模で検索
         * @param {Array<string>} [selectedForeignCountries] 外国人国籍で検索
         * @param {Array<string>} [selectedForeignRatio] 外国人比率で検索
         * @param {Array<string>} [selectedPickyAbout] こだわり条件で検索
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobSearchMoreGet(selectedJobNames?: Array<string>, selectedSkills?: Array<string>, selectedJapaneseLevel?: Array<string>, selectedLocations?: Array<string>, selectedSalary?: Array<string>, selectedIndustry?: Array<string>, selectedWorkExperience?: Array<string>, selectedEmployeeNum?: Array<string>, selectedForeignCountries?: Array<string>, selectedForeignRatio?: Array<string>, selectedPickyAbout?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobsModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobSearchMoreGet(selectedJobNames, selectedSkills, selectedJapaneseLevel, selectedLocations, selectedSalary, selectedIndustry, selectedWorkExperience, selectedEmployeeNum, selectedForeignCountries, selectedForeignRatio, selectedPickyAbout, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobApi.jobSearchMoreGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * JobApi - factory interface
 * @export
 */
export const JobApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobApiFp(configuration)
    return {
        /**
         * お気に入りから削除する 
         * @summary (06) お気に入り求人削除
         * @param {number} jobId ID of the job to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobIsLoginJobIdDelete(jobId: number, options?: any): AxiosPromise<void> {
            return localVarFp.jobIsLoginJobIdDelete(jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * お気に入った求人リストを取得 
         * @summary (07) お気に入った求人リストを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobIsLoginLikeJobListGet(options?: any): AxiosPromise<JobIsLoginLikeJobListGet200Response> {
            return localVarFp.jobIsLoginLikeJobListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 求人リストのいいねボタンを押すと ＤＢに登録 
         * @summary (05) 求人いいね登録
         * @param {LikeRequest} [likeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobIsLoginLikePost(likeRequest?: LikeRequest, options?: any): AxiosPromise<void> {
            return localVarFp.jobIsLoginLikePost(likeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 求人の詳細を取得 
         * @summary (02)求人詳細
         * @param {number} jobId 求人ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobJobIdGet(jobId: number, options?: any): AxiosPromise<JobDetailModel> {
            return localVarFp.jobJobIdGet(jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 全求人のリストを取得 
         * @summary (01)求人一覧
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobJobListGet(options?: any): AxiosPromise<JobsModel> {
            return localVarFp.jobJobListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary (03)求人検索
         * @param {Array<string>} [selectedJobNames] 
         * @param {Array<string>} [selectedSkills] スキルで検索
         * @param {Array<string>} [selectedJapaneseLevel] 
         * @param {Array<string>} [selectedLocations] 
         * @param {Array<string>} [selectedSalary] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobSearchGet(selectedJobNames?: Array<string>, selectedSkills?: Array<string>, selectedJapaneseLevel?: Array<string>, selectedLocations?: Array<string>, selectedSalary?: Array<string>, options?: any): AxiosPromise<JobsModel> {
            return localVarFp.jobSearchGet(selectedJobNames, selectedSkills, selectedJapaneseLevel, selectedLocations, selectedSalary, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary (04)詳細求人検索
         * @param {Array<string>} [selectedJobNames] 職種で検索
         * @param {Array<string>} [selectedSkills] スキルで検索
         * @param {Array<string>} [selectedJapaneseLevel] 日本語レベルで検索
         * @param {Array<string>} [selectedLocations] 勤務地で検索
         * @param {Array<string>} [selectedSalary] 年収で検索
         * @param {Array<string>} [selectedIndustry] 業界で検索
         * @param {Array<string>} [selectedWorkExperience] 仕事経験で検索
         * @param {Array<string>} [selectedEmployeeNum] 企業規模で検索
         * @param {Array<string>} [selectedForeignCountries] 外国人国籍で検索
         * @param {Array<string>} [selectedForeignRatio] 外国人比率で検索
         * @param {Array<string>} [selectedPickyAbout] こだわり条件で検索
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobSearchMoreGet(selectedJobNames?: Array<string>, selectedSkills?: Array<string>, selectedJapaneseLevel?: Array<string>, selectedLocations?: Array<string>, selectedSalary?: Array<string>, selectedIndustry?: Array<string>, selectedWorkExperience?: Array<string>, selectedEmployeeNum?: Array<string>, selectedForeignCountries?: Array<string>, selectedForeignRatio?: Array<string>, selectedPickyAbout?: Array<string>, options?: any): AxiosPromise<JobsModel> {
            return localVarFp.jobSearchMoreGet(selectedJobNames, selectedSkills, selectedJapaneseLevel, selectedLocations, selectedSalary, selectedIndustry, selectedWorkExperience, selectedEmployeeNum, selectedForeignCountries, selectedForeignRatio, selectedPickyAbout, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobApi - object-oriented interface
 * @export
 * @class JobApi
 * @extends {BaseAPI}
 */
export class JobApi extends BaseAPI {
    /**
     * お気に入りから削除する 
     * @summary (06) お気に入り求人削除
     * @param {number} jobId ID of the job to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    public jobIsLoginJobIdDelete(jobId: number, options?: RawAxiosRequestConfig) {
        return JobApiFp(this.configuration).jobIsLoginJobIdDelete(jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * お気に入った求人リストを取得 
     * @summary (07) お気に入った求人リストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    public jobIsLoginLikeJobListGet(options?: RawAxiosRequestConfig) {
        return JobApiFp(this.configuration).jobIsLoginLikeJobListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 求人リストのいいねボタンを押すと ＤＢに登録 
     * @summary (05) 求人いいね登録
     * @param {LikeRequest} [likeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    public jobIsLoginLikePost(likeRequest?: LikeRequest, options?: RawAxiosRequestConfig) {
        return JobApiFp(this.configuration).jobIsLoginLikePost(likeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 求人の詳細を取得 
     * @summary (02)求人詳細
     * @param {number} jobId 求人ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    public jobJobIdGet(jobId: number, options?: RawAxiosRequestConfig) {
        return JobApiFp(this.configuration).jobJobIdGet(jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 全求人のリストを取得 
     * @summary (01)求人一覧
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    public jobJobListGet(options?: RawAxiosRequestConfig) {
        return JobApiFp(this.configuration).jobJobListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary (03)求人検索
     * @param {Array<string>} [selectedJobNames] 
     * @param {Array<string>} [selectedSkills] スキルで検索
     * @param {Array<string>} [selectedJapaneseLevel] 
     * @param {Array<string>} [selectedLocations] 
     * @param {Array<string>} [selectedSalary] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    public jobSearchGet(selectedJobNames?: Array<string>, selectedSkills?: Array<string>, selectedJapaneseLevel?: Array<string>, selectedLocations?: Array<string>, selectedSalary?: Array<string>, options?: RawAxiosRequestConfig) {
        return JobApiFp(this.configuration).jobSearchGet(selectedJobNames, selectedSkills, selectedJapaneseLevel, selectedLocations, selectedSalary, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary (04)詳細求人検索
     * @param {Array<string>} [selectedJobNames] 職種で検索
     * @param {Array<string>} [selectedSkills] スキルで検索
     * @param {Array<string>} [selectedJapaneseLevel] 日本語レベルで検索
     * @param {Array<string>} [selectedLocations] 勤務地で検索
     * @param {Array<string>} [selectedSalary] 年収で検索
     * @param {Array<string>} [selectedIndustry] 業界で検索
     * @param {Array<string>} [selectedWorkExperience] 仕事経験で検索
     * @param {Array<string>} [selectedEmployeeNum] 企業規模で検索
     * @param {Array<string>} [selectedForeignCountries] 外国人国籍で検索
     * @param {Array<string>} [selectedForeignRatio] 外国人比率で検索
     * @param {Array<string>} [selectedPickyAbout] こだわり条件で検索
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobApi
     */
    public jobSearchMoreGet(selectedJobNames?: Array<string>, selectedSkills?: Array<string>, selectedJapaneseLevel?: Array<string>, selectedLocations?: Array<string>, selectedSalary?: Array<string>, selectedIndustry?: Array<string>, selectedWorkExperience?: Array<string>, selectedEmployeeNum?: Array<string>, selectedForeignCountries?: Array<string>, selectedForeignRatio?: Array<string>, selectedPickyAbout?: Array<string>, options?: RawAxiosRequestConfig) {
        return JobApiFp(this.configuration).jobSearchMoreGet(selectedJobNames, selectedSkills, selectedJapaneseLevel, selectedLocations, selectedSalary, selectedIndustry, selectedWorkExperience, selectedEmployeeNum, selectedForeignCountries, selectedForeignRatio, selectedPickyAbout, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MypageApi - axios parameter creator
 * @export
 */
export const MypageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ユーザ情報を取得します。 バックエンドでUserIdを取得して UserProfileテーブルから情報を取得 
         * @summary (01) プロフィール取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mypageProfileGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mypage/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MypageApi - functional programming interface
 * @export
 */
export const MypageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MypageApiAxiosParamCreator(configuration)
    return {
        /**
         * ユーザ情報を取得します。 バックエンドでUserIdを取得して UserProfileテーブルから情報を取得 
         * @summary (01) プロフィール取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mypageProfileGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mypageProfileGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MypageApi.mypageProfileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MypageApi - factory interface
 * @export
 */
export const MypageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MypageApiFp(configuration)
    return {
        /**
         * ユーザ情報を取得します。 バックエンドでUserIdを取得して UserProfileテーブルから情報を取得 
         * @summary (01) プロフィール取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mypageProfileGet(options?: any): AxiosPromise<UserProfileModel> {
            return localVarFp.mypageProfileGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MypageApi - object-oriented interface
 * @export
 * @class MypageApi
 * @extends {BaseAPI}
 */
export class MypageApi extends BaseAPI {
    /**
     * ユーザ情報を取得します。 バックエンドでUserIdを取得して UserProfileテーブルから情報を取得 
     * @summary (01) プロフィール取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MypageApi
     */
    public mypageProfileGet(options?: RawAxiosRequestConfig) {
        return MypageApiFp(this.configuration).mypageProfileGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ユーザ情報を取得します。 ログインしている場合はユーザの名前を返却します ログインしていない場合はauthenticated: falseを返却します 
         * @summary (01) ユーザ情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * メールアドレスとパスワードを入力し、登録 
         * @summary (02) アカウント登録
         * @param {UserRequest} [userRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersSignUpPost: async (userRequest?: UserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/signUp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * ユーザ情報を取得します。 ログインしている場合はユーザの名前を返却します ログインしていない場合はauthenticated: falseを返却します 
         * @summary (01) ユーザ情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.usersMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * メールアドレスとパスワードを入力し、登録 
         * @summary (02) アカウント登録
         * @param {UserRequest} [userRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersSignUpPost(userRequest?: UserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersSignUpPost(userRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.usersSignUpPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * ユーザ情報を取得します。 ログインしている場合はユーザの名前を返却します ログインしていない場合はauthenticated: falseを返却します 
         * @summary (01) ユーザ情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet(options?: any): AxiosPromise<UserModel> {
            return localVarFp.usersMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * メールアドレスとパスワードを入力し、登録 
         * @summary (02) アカウント登録
         * @param {UserRequest} [userRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersSignUpPost(userRequest?: UserRequest, options?: any): AxiosPromise<void> {
            return localVarFp.usersSignUpPost(userRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * ユーザ情報を取得します。 ログインしている場合はユーザの名前を返却します ログインしていない場合はauthenticated: falseを返却します 
     * @summary (01) ユーザ情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersMeGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).usersMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * メールアドレスとパスワードを入力し、登録 
     * @summary (02) アカウント登録
     * @param {UserRequest} [userRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersSignUpPost(userRequest?: UserRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).usersSignUpPost(userRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



